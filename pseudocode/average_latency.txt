1. Initialize a dictionary `transactions` to store details for each address.
   Each key in `transactions` will be the address, and the value will be a list of tuples, each containing the type of transaction (Rd or Wr) and the timestamp.

2. Parse each line of the simulator trace:
   For each line:
     a. Extract the `timestamp`, `TxnType`, and `address` from the line.
     b. If `TxnType` is "Rd" or "Wr", append a tuple (`TxnType`, `timestamp`) to the list associated with `address` in the `transactions` dictionary.

3. Initialize a dictionary `latencies` to store calculated latencies for each address.
   Each key will be the address, and the value will be a list of latencies.

4. For each address in `transactions`:
   a. Initialize a variable `last_read_time` to None.
   b. Loop through each tuple in the list for the address:
     i. If the tuple is a "Rd" transaction, set `last_read_time` to the timestamp of this transaction.
     ii. If the tuple is a "Wr" transaction and `last_read_time` is not None:
       - Calculate the latency as the difference between the current timestamp and `last_read_time`.
       - Append the calculated latency to the list associated with the address in `latencies`.
       - Reset `last_read_time` to None to avoid multiple calculations with the same read.

5. Initialize a dictionary `average_latencies` to store the average latency for each address.
   For each address in `latencies`:
     a. Calculate the average latency by dividing the sum of latencies by the number of latencies.
     b. Store this average in `average_latencies` under the address.

6. Calculate the weighted average latency for the entire workload:
   a. Initialize `total_latency_sum` to 0 and `total_count` to 0.
   b. For each address in `latencies`:
     i. Add the sum of latencies for the address to `total_latency_sum`.
     ii. Add the number of latencies for the address to `total_count`.
   c. Calculate the weighted average latency as `total_latency_sum / total_count`.

7. Return `average_latencies` and the overall weighted average latency.